---
    Description: 'Amazon EKS and Network configrations'
    
    Parameters:
      ClusterName:
        Type: String
        Default: Capston-cluster
        Description: Cluster name 
    
      Vpc:
        Type: String
        Default: 10.0.0.0/16
        Description: CIDR range for the VPC.
       
      PublicSubnet1CIDR:
        Type: String
        Default: 10.0.0.0/24
        Description: CIDR for public subnet 1
    
      PublicSubnet2CIDR:
        Type: String
        Default: 10.0.1.0/24
        Description: CIDR for public subnet 2
    
      PrivateSubnet1CIDR:
        Type: String
        Default: 10.0.2.0/24
        Description: CIDR for private subnet 1
    
      PrivateSubnet2CIDR:
        Type: String
        Default: 10.0.3.0/24
        Description: CIDR for private subnet 2
    
    Resources:
      VPC:
        Type: AWS::EC2::VPC
        Properties:
          CidrBlock:  !Ref Vpc
          EnableDnsSupport: true
          EnableDnsHostnames: true
          Tags:
          - Key: Name
            Value: !Sub '${AWS::StackName}-VPC'
    
      InternetGateway:
        Type: "AWS::EC2::InternetGateway"
    
      VPCGatewayAttachment:
        Type: "AWS::EC2::VPCGatewayAttachment"
        Properties:
          InternetGatewayId: !Ref InternetGateway
          VpcId: !Ref VPC
    
      PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
          VpcId: !Ref VPC
          Tags:
          - Key: Name
            Value: Public Subnets
          - Key: Network
            Value: Public
    
      PrivateRouteTable1:
        Type: AWS::EC2::RouteTable
        Properties:
          VpcId: !Ref VPC
          Tags:
          - Key: Name
            Value: Private Subnet AZ1
          - Key: Network
            Value: Private1
    
      PrivateRouteTable2:
        Type: AWS::EC2::RouteTable
        Properties:
          VpcId: !Ref VPC
          Tags:
          - Key: Name
            Value: Private Subnet AZ2
          - Key: Network
            Value: Private2
    
      PublicRoute:
        DependsOn: VPCGatewayAttachment
        Type: AWS::EC2::Route
        Properties:
          RouteTableId: !Ref PublicRouteTable
          DestinationCidrBlock: 0.0.0.0/0
          GatewayId: !Ref InternetGateway
    
      PrivateRoute1:
        DependsOn:
        - VPCGatewayAttachment
        - NatGateway1
        Type: AWS::EC2::Route
        Properties:
          RouteTableId: !Ref PrivateRouteTable1
          DestinationCidrBlock: 0.0.0.0/0
          NatGatewayId: !Ref NatGateway1
    
      PrivateRoute2:
        DependsOn:
        - VPCGatewayAttachment
        - NatGateway2
        Type: AWS::EC2::Route
        Properties:
          RouteTableId: !Ref PrivateRouteTable2
          DestinationCidrBlock: 0.0.0.0/0
          NatGatewayId: !Ref NatGateway2
    
      NatGateway1:
        DependsOn:
        - NatGatewayEIP1
        - PublicSubnet1
        - VPCGatewayAttachment
        Type: AWS::EC2::NatGateway
        Properties:
          AllocationId: !GetAtt 'NatGatewayEIP1.AllocationId'
          SubnetId: !Ref PublicSubnet1
          Tags:
          - Key: Name
            Value: !Sub '${AWS::StackName}-NatGatewayAZ1'
    
      NatGateway2:
        DependsOn:
        - NatGatewayEIP2
        - PublicSubnet2
        - VPCGatewayAttachment
        Type: AWS::EC2::NatGateway
        Properties:
          AllocationId: !GetAtt 'NatGatewayEIP2.AllocationId'
          SubnetId: !Ref PublicSubnet2
          Tags:
          - Key: Name
            Value: !Sub '${AWS::StackName}-NatGatewayAZ2'
    
      NatGatewayEIP1:
        DependsOn:
        - VPCGatewayAttachment
        Type: 'AWS::EC2::EIP'
        Properties:
          Domain: vpc
    
      NatGatewayEIP2:
        DependsOn:
        - VPCGatewayAttachment
        Type: 'AWS::EC2::EIP'
        Properties:
          Domain: vpc
    
      PublicSubnet1:
        Type: AWS::EC2::Subnet
        Metadata:
          Comment: Subnet 1
        Properties:
          MapPublicIpOnLaunch: true
          AvailabilityZone:
            Fn::Select:
            - '0'
            - Fn::GetAZs:
                Ref: AWS::Region
          CidrBlock:
            Ref: PublicSubnet1CIDR
          VpcId:
            Ref: VPC
          Tags:
          - Key: !Join [ "", ["kubernetes.io/cluster/",!Ref ClusterName ] ]
            Value: shared
          - Key: Name
            Value: !Sub "${AWS::StackName}-PublicSubnet1"
          - Key: kubernetes.io/role/elb
            Value: 1
    
      PublicSubnet2:
        Type: AWS::EC2::Subnet
        Metadata:
          Comment: Subnet 2
        Properties:
          MapPublicIpOnLaunch: true
          AvailabilityZone:
            Fn::Select:
            - '1'
            - Fn::GetAZs:
                Ref: AWS::Region
          CidrBlock:
            Ref: PublicSubnet2CIDR
          VpcId:
            Ref: VPC
          Tags:
          - Key: !Join [ "", ["kubernetes.io/cluster/", !Ref ClusterName ] ]
            Value: shared
          - Key: Name
            Value: !Sub "${AWS::StackName}-PublicSubnet2"
          - Key: kubernetes.io/role/elb
            Value: 1
    
      PrivateSubnet1:
        Type: AWS::EC2::Subnet
        Metadata:
          Comment: Subnet 3
        Properties:
          AvailabilityZone:
            Fn::Select:
            - '0'
            - Fn::GetAZs:
                Ref: AWS::Region
          CidrBlock:
            Ref: PrivateSubnet1CIDR
          VpcId:
            Ref: VPC
          Tags:
          - Key: !Join [ "", ["kubernetes.io/cluster/", !Ref ClusterName ] ]
            Value: shared
          - Key: Name
            Value: !Sub "${AWS::StackName}-PrivateSubnet1"
          - Key: kubernetes.io/role/internal-elb
            Value: 1
    
      PrivateSubnet2:
        Type: AWS::EC2::Subnet
        Metadata:
          Comment: Private Subnet 2
        Properties:
          AvailabilityZone:
            Fn::Select:
            - '1'
            - Fn::GetAZs:
                Ref: AWS::Region
          CidrBlock:
            Ref: PrivateSubnet2CIDR
          VpcId:
            Ref: VPC
          Tags:
          - Key: !Join [ "", ["kubernetes.io/cluster/" , !Ref ClusterName ] ]
            Value: shared
          - Key: Name
            Value: !Sub "${AWS::StackName}-PrivateSubnet2"
          - Key: kubernetes.io/role/internal-elb
            Value: 1
    
      PublicSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          SubnetId: !Ref PublicSubnet1
          RouteTableId: !Ref PublicRouteTable
    
      PublicSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          SubnetId: !Ref PublicSubnet2
          RouteTableId: !Ref PublicRouteTable
    
      PrivateSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          SubnetId: !Ref PrivateSubnet1
          RouteTableId: !Ref PrivateRouteTable1
    
      PrivateSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          SubnetId: !Ref PrivateSubnet2
          RouteTableId: !Ref PrivateRouteTable2
    
      ClusterSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupDescription: Cluster and nodes communication
          VpcId: !Ref VPC
    
      ClusterRole:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Principal:
                Service:
                  - eks.amazonaws.com
              Action:
              - sts:AssumeRole
          Path: "/"
          ManagedPolicyArns:
            - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
            - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
            - arn:aws:iam::aws:policy/ElasticLoadBalancingFullAccess      
    
      NodeRole:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Principal:
                  Service:
                    - ec2.amazonaws.com
                Action:
                  - sts:AssumeRole
          Path: "/"
          ManagedPolicyArns:
            - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
            - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
            - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
    
      Cluster:
        Type: "AWS::EKS::Cluster"
        Properties:
          Name: !Ref ClusterName
          ResourcesVpcConfig:
            SecurityGroupIds:
              - !Ref ClusterSecurityGroup
            SubnetIds:
              - !Ref PublicSubnet1
              - !Ref PublicSubnet2
          
          RoleArn: !GetAtt ClusterRole.Arn
          Version: 1.16
          
      Nodegroup:
        Type: 'AWS::EKS::Nodegroup'
        DependsOn: Cluster
        Properties:
          ClusterName: !Ref ClusterName
          NodeRole: !GetAtt NodeRole.Arn
          InstanceTypes: 
            - t3.micro
          ScalingConfig:
            MinSize: 1
            DesiredSize: 2
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2